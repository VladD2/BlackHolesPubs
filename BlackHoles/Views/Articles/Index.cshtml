@using BlackHoles.Models;
@using BlackHoles.Utils;
@model IEnumerable<Article>

@{
  var title = "Публикуемые статьи";
  ViewBag.Title = title;
}

<div style="max-width: 1200px; margin: auto;">
  <h2>@title</h2>

  <p class="alert alert-warning">
    Если вы внесли изменения в статью (исправили замечания редакторов), перейдите на страницу редактирования статьей
    (нажмите кнопку <code style="background: #428bca;"><img width="16" height="16" border="1" src='@Url.Content("~/Images/Edit-white.svg")' /></code> рядом со статьей), выберите файл статьи в поле «Файл статьи», переключите флажок «Авторы статьи ознакомились…»
    и нажмите кнопку «Сохранить» внизу страницы. При этом вы можете написать комментарий в поле над списком комментариев.
    После этого статус статьи изменится на «Новая версия» и редакторы получат уведомлении о наличии новой версии.
  </p>
  <p class="alert alert-danger">
    Обратите внимание, что новую версию нельзя внести после принятия статьи к публикации. Если вы нашли ошибку в статье и хотите ее исправить
    (после принятия к публикации) напишите письмо на адрес <a href="mailto:vladdq@yandex.ru">vladdq@yandex.ru</a> и прикрепите к нему новую версию статьи.
  </p>

  @if (User.IsInRole(Constants.EditorRole))
  {
    var articles = Model.ToList();
    var groupedByIssue = articles.GroupBy(a => a.Issue);
    <div>
      @foreach (var g in groupedByIssue.Where(g => g.Any(a => a.Status == ArticleStatus.PaidDelivery && a.Authors.Any(au => !string.IsNullOrEmpty(au.PostalAddress)))).OrderBy(g => g.Key.Year).ThenBy(g => g.Key.Number))
      {
        @Html.ActionLink($"Адреса для рассылки № {g.Key.Year} за {g.Key.Number}", "Adresses", new { year = g.Key.Year, number = g.Key.Number })<br />
      }

      <dl class="dl-horizontal">
        <dt>Принятых статей:</dt>
        <dd>
          @{ var strs = groupedByIssue.Select(g => new { Issue = g.Key, Count = g.Count(a => a.Status >= ArticleStatus.Accepted) }).Where(g => g.Count > 0)
              .Select(g => $@"{g.Issue.Year} {g.Issue.Number}: {g.Count}"); }
          @string.Join(", ", strs)
        </dd>

        <dt>Требует проверки:</dt>
        <dd>@articles.Count(a => a.Status == ArticleStatus.RequiresVerification || a.Status == ArticleStatus.NewVersion)</dd>

        <dt>Проверен&nbsp;Antiplagiat:</dt>
        <dd>@articles.Count(a => a.Status == ArticleStatus.AddedToAntiplagiat)</dd>

        <dt>Загружен&nbsp;отчет&nbsp;Antiplagiat:</dt>
        <dd>@articles.Count(a => a.Status == ArticleStatus.AntiplagiatReportLoaded)</dd>

        <dt>С ошибками:</dt>
        <dd>@articles.Count(a => a.Status == ArticleStatus.HasErrors)</dd>

        <dt>Отклонено:</dt>
        <dd>@articles.Count(a => a.Status == ArticleStatus.Rejected)</dd>

        <dt>Нет ответа:</dt>
        <dd>@articles.Count(a => a.Status == ArticleStatus.NoAnswerForALongTime)</dd>

        <dt>Всего статей:</dt>
        <dd>@articles.Count(a => a.Status < ArticleStatus.PublishedButNotPaid)</dd>
      </dl>
    </div>
  }

  <p>
    @Html.ActionLink("Доабавить статью", "Create", null, new { @class = "btn btn-primary" })
  </p>
  <table class="table table-hover">
    <tr>
      <th>@Html.DisplayNameFor(model => model.Id)</th>
      <th>@Html.DisplayNameFor(model => model.Status)</th>
      <th>@Html.DisplayName("№")</th>
      <th>@Html.DisplayNameFor(model => model.Authors)</th>
      <th>@Html.DisplayNameFor(model => model.ShortArtTitles)</th>
      <th>@Html.DisplayNameFor(model => model.Created)</th>
      <th>@Html.DisplayNameFor(model => model.Modified)</th>
      <th>@Html.DisplayNameFor(model => model.ArticleDate)</th>
      <th>@Html.Label("Файлы")</th>
      @if (User.IsInRole(Constants.EditorRole))
      {
        <th>Зарегистрировал</th>
      }
      <th></th>
    </tr>

    @foreach (var article in Model)
    {
      var trClass = "";
      switch (article.Status)
      {
        case ArticleStatus.Rejected:             trClass = "muted";   break;
        case ArticleStatus.NoAnswerForALongTime: trClass = "danger";  break;
        case ArticleStatus.HasErrors:            trClass = "danger";  break;
        case ArticleStatus.Accepted:             trClass = "success"; break;
        case ArticleStatus.Paid:                 trClass = "success"; break;
        case ArticleStatus.PaidDelivery:         trClass = "success"; break;
      }
      <tr class="@trClass">
        <td>@Html.DisplayFor(modelItem => article.Id)</td>
        <td><span class="@article.Status">@Html.DisplayFor(modelItem => article.Status)</span></td>
        <td>@Html.DisplayFor(m => article.IssueYear) @Html.DisplayFor(m => article.IssueNumber)</td>
        <td>@article.GetAuthorsBriefFios()</td>
        <td>@Html.DisplayFor(m => article.ShortArtTitles)</td>
        <td>@Html.DisplayFor(m => article.Created)</td>
        <td>@Html.DisplayFor(m => article.Modified)</td>
        <td>@Html.DisplayFor(m => article.ArticleDate)</td>
        <td>
          @Html.CheckBox("ArticleVersions", article.ArticleVersions > 0, new { Title = $"Загружено версий статьи:  {article.ArticleVersions}", @readonly = "readonly", disabled = "disabled" })
          @Html.CheckBox("ReviewTextVersions", article.ReviewTextVersions > 0, new { Title = $"Загружено текстовых версий рецензий или отзывов ученого совета: {article.ReviewTextVersions}", @readonly = "readonly", disabled = "disabled" })
          @Html.CheckBox("ReviewImgVersions", article.ReviewImgVersions > 0, new { Title = $"Загружено фото-версий рецензий или отзывов ученого совета: {article.ReviewImgVersions}", @readonly = "readonly", disabled = "disabled" })
        </td>
        @if (User.IsInRole(Constants.EditorRole))
        {
          <td>@Html.DisplayFor(modelItem => article.Owner.UserName) (@Html.DisplayFor(modelItem => article.Owner.Email))</td>
        }
        @Shared.TableRowButtons(new { id = article.Id })
      </tr>
    }
  </table>
</div>
